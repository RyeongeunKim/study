<< 생성자 >>

* 생성자란? 

-new 연산자로 클래스로부터 객체를 생성할 때 
 호출되어 객체의 초기화를 담당하는 중괄호 {} 블록
-객체를 다양한 값으로 초기화하기 위해 사용

* 객체 초기화 

-필드를 초기화하거나 메소드를 호출해서 객체를 사용할 준비를 하는 것
-생성자를 실행하지 않고는 클래스로부터 객체를 만들 수 없음
-생성자가 실행되면 힙영역에 객체가 생성되고 객체의 번지가 리턴됨
-리턴된 번지는 클래스 변수에 저장

* 기본 생성자

-클래스 public class로 선언 -> 기본 생성자에도 public이 붙음
 클래스 public 없이 class로만 선언 -> 기본 생성자에도 public이 붙지않음
 
 예) Car 클래스 설계할 때 생성자를 생략한 경우 기본 생성자가 다음과 같이 생성됨
 
 소스 파일(Car.java) 
 public class Car { 
 
 }
        ↓ 컴파일

 바이트 코드 파일(Car.class)
 public class Car {
   public Car() { } //기본 생성자(Car())가 자동 추가됨 
 }

 => 클래스에 생성자를 선언하지 않아도 다음과 같이 new 뒤에 
    기본 생성자를 호출해서 객체를 생성할 수 있음

    Car myCar = new Car();

* 생성자 선언

  클래스(매개변수선언, ...){
    //객체의 초기화 코드
  }

-메소드와 비슷한 모양을 가지고 있으나, 리턴 타입이 없고 클래스 이름과 동일함
-생성자 블록 내부에는 객체 초기화 코드가 작성되는데, 
 필드에 초기값을 저장하거나 메소드를 호출하여 객체 사용 전에 필요한 준비를 함
-매개 변수는 생략 가능하고 여러 개를 선언할 수도 있음

 예) 
 Car myCar = new Car("그랜저", "검정", 300);
 
 public class Car {
  //생성자
  Car(String model, String color, int maxSpeed) 
 }

 위 매개값과 같이 String, String, int 타입으로 매개 변수 선언

-------------------------------------------------------------

 Car 클래스에 생성자 선언이 되어 있기 때문에 
 기본 생성자(Car())를 호출해서 객체를 생성할 수 없고 
 Car(String color, int cc)를 호출해서 객체를 생성하기

 => 생성자 선언
 public class Car{
  //생성자
  Car(String color, int cc) {
  }
 }

 => 생성자를 호출해서 객체 생성
 public class CarExample {
  public static void main(String[] args) {
    Car myCar = new Car("검정", 3000);
    //Car myCar = new Car(); (x) <--기본 생성자를 호출할 수 없음 
   }
 } 

* 필드 초기화

-클래스로부터 객체가 생성될 때 필드는 기본 초기값으로 자동 설정된다.
-다른 값으로 초기화하는 2가지 방법
  1) 필드를 선언할 때 초기값을 주는 방법
  2) 생성자에게 초기값을 주는 방법

-필드를 선언할 때 초기값을 주게 되면 동일한 클래스로부터 생성되는 객체들은 
 모두 같은 값을 갖게 된다.
-객체 생성 후 초기값을 변경할 수 있지만, 객체 생성 시점에는 필드의 값이 모두 같다.

  1) 예제
  public class Korean {
  String nation = "대한민국";
  String name;
  String ssn;
  }

  Korean k1 = new Korean();
  Korean k2 = new Korean();  

  k1, k2 객체의 nation 필드에는 모두 "대한민국"이 저장되어 있음

  2) 객체 생성 시점에 다양한 값들로 초기화되어야 하는 경우
  public class Korean {
  //필드
  String nation = "대한민국";
  String name;
  String ssn;

  //생성자
  public Korean(String n, String s){
    name = n;
    ssn = s;
   }  
  }

  아래 코드에서 "박자바", "김자바"는 매개 변수 n을 통해 전달되고
  "011225-1234567", "930525-0654321"은 매개 변수 s를 통해 전달된다
  이 값들은 각각 name 필드와 ssn 필드의 초기값으로 사용된다.

  Korean k1 = new Korean("박자바", "011225-1234567");
  Korean k2 = new Korean("김자바", "930525-0654321");



  


 
 
  



