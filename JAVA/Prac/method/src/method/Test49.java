package method;


// 사용자 정의 메소드 만들기 : 개발자가 필요할 때 마다 새롭게 기능을 추가하여 만드는 메소드

// 방법1. 매개변수가 없고 리턴값이 없는 메소드 만들기
	//메소드 이름 : hello_func
	//기능 "Hello World"<--출력

public class Test49 {

	public static void hello_func() { //리턴할 값의 타입과 리턴값은 항상 일치해야 한다.
		System.out.println("Hello World!");

	}
	
	//void자료형?
	//메소드의 몸체에 기술한 명령을 실행할 뿐 실행결과 데이터를 메소드를 호출한 줄로 반환하지 않는 경우 사용
	//요약 -> 메소드의 리턴값이 없는 경우 void자료형을 사용
	
// 방법2. 매개변수가 있고 리턴할 값이 없는 메소드 만들기
	//메소드 이름 : sum
	//기능 : 매개변수로 전달 받은 값 까지의 자연수의 합을 구하는 기능
	
	public static void sum(int n) {
		//매개변수란? sum이라는 메소드를 호출할 때 전달 받은 값을 담아 두기 위한 변수
		//위 int n <- 매개변수
		
		int tot = 0; //매개변수로 전달 받은 자연수 까지의 합을 저장할 변수
		
		int i; //for반복문의 초기식을 밖으로 빼서 변수만 선언 할 수 있다
		
		//숫자 1부터 n매개변수로 전달받은 숫자까지의 합을 tot변수에 누적
		
		for(i=1; i<=n; i++) {
			tot += i;
		}
		
		//구해진 누적합 출력
		System.out.println("1 ~ " + n + "까지의 합 = " + tot);
	
	}
	
// 방법3. 메소드 호출 시 매개변수와 리턴값이 있는 메소드만들기
//		 풀이) 특정 메소드를 호출한 곳으로 메소드의 연산결과 값을 되돌려 줄 수 있는 메소드 만들기
//	     방법 -> return 키워드 사용
//return 키워드
//메소드의 몸체부분이 실행된 후..
//연산결과 값을 가지고 메소드를 호출한 곳으로 연산결과값을 되돌려 줄 때 사용
//단! 하나의 연산결과 값만 되돌려 줄 수 있다.
	//메소드 이름 : abs
	//기능 : 매개변수로 전달 받은 값의 절대값을 구해 절대값을 되돌려주는 기능의 메소드
	
	public static int abs(int data) {
		//절대값 구하는 기능을 코드로 구현
		//매개변수 전달받은 값이 음수일 때 -> 양수로 변경
		if(data < 0) {
			data = -data;
		}
		
		//abs메소드를 호출한 장소로 연산한 절대값을 되돌려주기(리턴하기, 반환하기)
		return data;
	}

	//메소드를 호출 하는 곳
	public static void main(String[] args) {
		
	//메소드 호출 하기
		
		//-10의 절대값을 구하기위해 abs(int data)메소드 호출 !
		//요약 : abs메소드 호출 시 -10을 전달하여 연산된 절대값을 반환하여 출력
		
		System.out.println("-10의 절대값 : " + abs(-10)); //10
		
		//"Hello World!" 출력하기 위해 hello_func()메소드 호출!
		hello_func();
		
		// 1 ~ 5까지의 누적 합을 계산하여 출력 하기 위해 sum(int n)메소드 호출!
		// 요약 : sum메소드 호출 시 5를 전달하여 1 ~ 5까지의 누적 합을 계산하여 출력
		sum(5);
		

	}

}
