< COUNT 함수 >
 
-count(*) : null O, 중복값 O (※ 모든 그룹함수는 null값은 무시하고 구하지만 
                                       뒤에 *가 올 경우 모든 행이 null값이지 않는 이상
                                       null값을 포함하고 구한다)
-count(expr) : null X, 중복값 O
-count(distinct expr) : null X, 중복값 X

(ex1) select count(*)
       from employees
       where department_id = 80;
=> 80번 부서에 소속된 사원의 수를 구해라

(ex2) select count(commission_pct)
       from employees
       where department_id = 80;
=> 80번 부서에 소속된 사원 중 커미션을 받는 사원의 수를 구해라

(ex3) select count(distinct department_id)
       from employees
=> 사원들이 소속된 부서의 수를 구해라
    ※ distinct : 중복된 값 제외

-------------------------------------------------------------------------------------------------------
(Quiz) employees 테이블로부터 전체 사원의 커미션 평균을 구하는 쿼리구문을 작성하시오.
[결과] avg_comm
       -------------
        (           )

[오답] 널값을 무시하고 평균을 구하기 때문
SQL> select avg(commission_pct) as avg_comm
        from employees;
=> 커미션을 받는 사원들의 커미션 평균

[정답] select avg(nvl(commission_pct, 0)) as avg_comm
        from employees;
---------------------------------------------------------------------------------------------------------
< GROUP BY절 >

( 순서 ) SELECT -> FROM -> WHERE -> GROUP BY/HAVING -> ORDER BY
       ※ GROUP BY와 HAVING절의 순서는 상관없지만 GROUP BY절 먼저 쓰는걸 권장한다.

select구문의 컬럼 중에서 group by절에 
포함된 컬럼과 포함되지 않는 컬럼을 같이 출력하려면
그룹함수에 포함 되지 않은 컬럼을 gruop by절에 입력해야 문법오류가 발생하지 않는다.

< HAVING절 >

조건절 - WHERE : 행 제한 조건문 => 일반적인 조건문, 단일함수
           HAVING : 행 그룹 제한 조건문 => 그룹함수 조건문



4.
SELECT last_name, NVL(TO_CHAR(commission_pct), 'No Commission') COMM
FROM employees;

SELECT last_name, NVL2(commission_pct, TO_CHAR(commission_pct), 'No Commission') COMM
FROM employees;

<4장 연습문제 풀이>

1. select job_id, max(salary) as "Maximum",
          min(salary) as "Minimum",
          sum(salary) as "Sum",
          avg(salary) as "Average"
   from employees
   group by job_id;

2. select manager_id, min(salary)
   from employees
   where manager_id is not null
   group by manager_id
   having min(salary) >= 6000
   order by min(salary) desc;
