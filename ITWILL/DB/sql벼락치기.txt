< distinct > 중복값 제거

사원 테이블에서 중복되는 사원번호는 한 번만 출력
select distinct 사원번호
from 사원;

< where절 >

1. 상수  
  where 부서번호 = 90;

2. 문자열 
   where 이름 = 'Gildong';

3. 날짜 
   where 입사일='17-FEB-96';
   ※ 월에 해당하는 JUN은 대소문자 구분 X
      날짜 검색 형식 : DD(일)-MON(월)-YY(연)

4. 관계 연산자 
   where<=3000;

5. betwenn 연산자 
   where 월급 between 2500 and 3500;
   날짜, 문자열 사용 가능

6. in 연산자 : 복수의 조건을 지정할 수 있음
   where 사수번호 in(100,101,201);
   '='기능과 비슷하나 복수의 값을 지정할 수 있다.
   in안의 값은 대상 컬럼의 데이터형과 동일해야 함
   문자, 날짜, 숫자 데이터 모두 가능

7. 패턴 연산자(_, %)

< 패턴 연산자 공식>

- ‘_(언더스코어)’: 한 자리의 문자
- % : 0~n자리 문자 (몇 글자든 신경쓰지 않겠다)
- %o% : o가 들어가는 모든 데이터를 검색하겠다

< 예시 > 

- 두번째 자리가 o로 시작하는 이름
where 이름 like '_o%'

- Popp를 추출하는 패턴 예시

WHERE last_name LIKE '_o__';

- 날짜를 추출하는 패턴 예시

employees 테이블에서

입사월이 MAY(5월)인 직원들의 입사일 출력

WHERE 입사일 LIKE '%MAY%';

8. WHERE절 조건에 IS NULL / IS NOT NULL 사용

사수번호가 없는(상사가 없는) 사원의 이름, 사수번호를 출력

WHERE manager_id IS NULL;

(상사가 없는 사람을 고르라)

IS NULL; 이 없다

IS NOT NULL; 이 없지 않다(있다)

9. WHERE절 조건에 논리 연산자(AND, OR, NOT) 사용

1) A AND B(A 그리고 B): A, B의 조건을 동시에 만족하는 행을 결과로 출력

월급이 10000 이상이고, 직무번호에 ‘MAN’이 들어가는 사원

WHERE 월급 >= 10000 AND 직무번호 LIKE '%MAN%';  


2) A OR B(A 또는 B): A, B 조건 중 하나라도 만족하는 행을 결과로 출력

월급이 10000 이상이거나, 직무번호에 ‘MAN’이 들어가는 사원의

사원번호, 이름, 직무번호, 월급을 출력

WHERE 월급 >= 10000 OR 직무번호 LIKE '%MAN%';  

3) NOT 연산자: 조건이 아닌 것

이름에 ‘A’가 들어가지 않는 사원

WHERE 이름 NOT LIKE '%A%';

< order by > 정렬

- 내용 출력 시, 정렬하여 출력하는 문법
- 위치: SELECT 구문의 가장 마지막에 위치
- 기본값은 ASC(오름차순)으로 적용

종류

ASC(Ascending order, default): 오름차순
DESC(Descending order): 내림차순

1) 내림차순

입사일을 기준으로 내림차순하여 출력
order by 입사일 desc;

데이터 타입에서의 대소 관계(소문자가 대문자보다 큰 값으로 인식됨)

데이터타입 오름차순(작->큰) | 내림차순(큰->작)
숫자         0->9                | 9->0 
날짜	  이전->이후	| 이후->이전
문자	  a->z	  	| z->a

2) 오름차순(아무런 조건 X)

월급 기준으로 오름차순하여 출력
ORDER BY 월급;

3) 오름차순과 내림차순이 교집합일 때

부서번호 기준으로 오름차순한 후, 월급 기준으로 내림차순하여 출력

[정렬 기준이 여러 개인 경우 왼쪽에 있는 정렬기준이 우선 적용되며, 
정렬 기준에서 같은 값을 가진 행이 있을 경우 후 순위의 정렬기준이 적용된다.]

ORDER BY 부서번호, 월급 DESC;

< GROUP BY, HAVING >

1) 그룹함수

-null값을 가진 행은 연산에서 제외함
-중복값을 제거하는 distinct도 사용 가능

숫자값 그룹 함수

AVG, STDDEV, SUM, VARIANCE

데이터 타입에 상관없이 사용하는 그룹 함수

COUNT, MAX, MIN

사원 테이블의 전체 행의 개수 출력

select count(*)
from 사원;

2) group by

같은 부서번호를 갖는 사람들을 그룹으로 묶음
group by 부서번호;

사원 테이블에서
부서번호가 40보다 큰 사원을
부서번호와 직무번호로 묶어서
부서번호, 직무번호, 월급의 평균을
부서번호를 기준으로 오름차순하여 출력

select 부서번호, 직무번호, AVG(월급)
from 사원
where 부서번호>40
group by 부서번호, 직무번호
order by 부서번호;

3) having

사원 테이블에서 
사수번호를 알 수 없는 사원은 제외하고
사수번호로 그룹화하여 
사수번호별 최소 월급을 출력하되,
최소 월급이 6000 이상인 그룹을
최소 월급을 기준으로 내림차순으로 출력

select 사수번호, min(월급)
from 사원
where 사수번호 is not null
group by 사수번호
having min(월급)>=6000
order by min(월급) desc;

< DML >

1) insert

insert into 테이블명(컬럼1, 컬럼2, 컬럼3)
values(값1, 값2, 값3)

2) update

update 테이블명
set 컬럼명1=값,컬럼명2=값,...
[where 조건];

set자리에 수정할 컬럼은=값 리스트는 콤마로 나열하고 and는 사용 X

학생 테이블에서 이름이 홍길동인 학생의
학점을 'A'로 갱신

update 학생
set 학점='A'
where 이름='홍길동';

사원 테이블에서 사원번호가 113인 사원의
부서번호를 50, 급여를 3000으로 갱신

update 사원
set 부서번호=50, 급여=3000
where 사원번호=113;

3) delete : 행 삭제

delete[from] 테이블명
[where 조건];

where조건을 설정 X => 테이블에 입력된 정보가 모두 삭제

부서 테이블에서 부서번호가 300인 부서삭제

delete from 부서
where 부서번호=300;

< DDL > 

1. create

제약조건 constraint 
-unique : 중복값 허용 X

idx int constraint mem_id_pk primary key,...

2. alter : 테이블 생성 이후, 테이블을 변경할 때 사용

1) 테이블에 컬럼 추가

alter table 테이블명
add (컬럼명 데이터타입(데이터크기));

학생 테이블에
학점 컬럼을 추가(크기 5인 가변문자열형)

alter table 학생
add (학점 varchar(5));

2) 테이블의 기존 컬럼 수정

alter table 테이블명
modify (컬럼명 데이터타입(데이터크기));

학생 테이블의
이름 컬럼의 데이터형을 문자열형에서 가변문자열형(30)으로 수정

alter table 학생
modify(이름 varchar(30));

3) 테이블의 기존 컬럼 삭제

alter table 테이블명
drop column 컬럼명;

학생 테이블의 학점 컬럼을 삭제

alter table 학생
drop column 학점;

3. drop : 테이블 삭제

drop table 테이블명;

학생 테이블 삭제
drop table 학생;

학생 테이블을 삭제하되, 테이블을 참조하는 외래키(FK)로 엮인 테이블을 모두 삭제
drop table 학생 cascade constraints;

< view / index >

1. view : 논리적으로 존재하는 테이블(물리적 X)

기본 문법

1) 뷰 생성

CREATE [OR REPLACE] [FORCE|NOFORCE] VIEW 뷰이름

AS 서브쿼리;

2) 뷰 삭제

DROP VIEW 뷰이름;

3) 서브쿼리 : 하나의 쿼리문 내에 포함된 또 하나의 쿼리문

선택과목 B 테이블에서 'MATH'를 선택한 학생들의 이름을 찾아
student A 테이블에서 모든 정보를 조회

select *
from student A
where A.student_name
in (select B.student_name
    from subject B
    where B.subject_name='MATH');

사원 테이블에서 부서번호가 80인 직원들의
아이디, 이름, 월급을 조회하는 회원80 VIEW 생성

create view 회원80
as
  select 아이디, 이름, 월급
  from 사원
  where 부서번호=80;

2. index : 검색 속도를 높이기 위해 사용하는 객체

1) index 생성

create index 인덱스명
on 테이블명(인덱스지정할 컬럼명);

학생 테이블의 학번을 idx_num으로 인덱스 지정

create index idx_num
on 학생(학번);

2) index 삭제

drop index 인덱스명;

< DCL > grant, revoke

1. grant : 권한 부여

grant 권한
on 테이블 to 권한부여할계정명[with grant option];

APPUESR 계정에 

학생 테이블에 대한 SELECT, INSERT, UPDATE, DELETE를
수행할 수 있는 권한을 부여

grant select, insert, update, delete
on 학생 to APPUSER;

APPUESR 계정에 

학생 테이블에 대한 SELECT, INSERT, UPDATE, DELETE를 수행할 수 있는 
권한을 부여하되, APPUSER가 다른 유저에게 자신이 받은 권한을 줄 수 있도록 설정
[ WITH GRANT OPTION을 추가]

grant select, insert, update, delete
on 학생 to APPUSER with grant option;

2. revoke : 권한 회수

revoke 권한
on 테이블 from 권한을회수할계정명[cascade constraints];


APPUSER 계정에 부여된 권한 중,
학생 테이블에서 DELETE를 수행할 수 있는 권한을 회수

revoke delete
on 학생 from APPUSER;

APPUSER 계정에 부여된 권한 중,
학생 테이블에서 DELETE를 수행할 수 있는 권한을 회수하고
만약, APPUSER가 다른 유저에게 DELETE 권한을 부여했다면 함께 회수
[ CASCADE를 추가]

revoke delete
on 학생 from APPUSER cascade constraints;

