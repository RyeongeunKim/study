package method;
/*
 	1. 메소드(함수)란?
 		어떤 특정한 기능을 처리하기 위한 명령어들을 묶어 놓은 작은 프로그램단위 
 	
 	2. 자바의 메소드 종류 2가지
 		(1) 내장 메소드 : 자주 사용하는 기능을 미리 만들어서 자바에서 제공하는 메소드
 		<자바API문서 참고>
 		- String클래스 내부에 toString()메소드 : 특정 데이터를 문자열로 변환하는 기능의 메소드
 		- Math클래스 내부에 random()메소드 : 0.0 ~ 1.0 랜덤값을 제공해주는 기능의 메소드
 		- Date클래스 내부에 getDate()메소드 : 현재 날짜 및 시간관련 데이터를 제공해주는 기능의 메소드
 		
 		(2) 사용자 정의 메소드 : 우리 개발자가 특정 기능을 필요로 할 때 마다 새롭게 기능을 추가해서 만드는 메소드
 			1. 매개변수가 없고 반환할 값이 없는 메소드를 만들 수 있다.
 			2. 매개변수가 있고 반환할 값이 없는 메소드를 만들 수 있다.
 			3. 매개변수와 반환할 값이 있는 메소드를 만들 수 있다.
 			
 		(2-1) 사용자 정의 메소드 만들기 문법
 		
 		접근지정자 반환할값의타입 메소드명(타입 매개변수명){ 	<---- 메소드의 선언부 

 			 
 			 메소드의 기능을 코드로 작성; 	<---- 메소드의 구현부 
 			 
 			 //메소드를 호출한 장소로 반환할 값 작성
 			 return 반환할 값;
 			 
 		
 		}
 	
 */
public class Test47 {
	

	//자바프로그램의 시작점 main 메소드
	//-> 메소드의 이름은 main이다.
	//-> 프로그램을 시작시키는 기능
	//-> main메소드 내부에서 다른 메소드를 호출해서 사용할 수 있다.
	//-> 같은 클래스 내부의 다른 메소드 호출 시 클래스명.메소드명 <--문법을 사용한다.
	//-> main메소드의 중괄호 { 열고 } 닫는 기호 내에 존재하는 문장들이 순차적으로 JVM에 의해 실행된다.
	public static void main(String[] args) {
		
		//main메소드 내부에서 다른 메소드 호출 가능
		//첫번째)
		//System이라는 이름의 클래스 내부에
		//out이라는 상수에 저장된 PrintStream 객체에 접근하여
		//PrintStream객체 내부에 ... println 메소드가 만들어져 잇으므로 메소드를 호출하여
		//그 기능을 사용 할 수 있다.
		System.out.println("안녕"); //println(String value)메소드의 기능 : 매개변수 value로 전달받은 데이터 출력
		
		
		
		//두번째)
		hi(); //아래에 만들어 놓은 hi라는 이름의 메소드 호출!
			  //이렇게 hi라는 이름의 메소드를 호출하면 
		      //아래에 만들어 놓은 hi() 함수의 {}중괄호 내부에 구현부의 코드가 실행됨
		
		for(int i=1; i<4; i++) { //3번 반복
			hello(); //hello라는 이름의 메소드 호출 구문
		}
		
	}
	
	//main메소드와 다른 이름으로 사용자 정의 메소드 만들기
	/*
	 	hello 라고 출력하는 기능의 hello라는 이름의 메소드(함수) 만들기
	 */
	public static void hello() {
		System.out.println("hello!");
	}
	
	/*
	 	hi!라고 출력하는 기능의 hi라는 이름의 메소드 만들기
	 */
	
	public static void hi() {
		System.out.println("hi!");
	}

}// Test47 class의 닫는 기호
