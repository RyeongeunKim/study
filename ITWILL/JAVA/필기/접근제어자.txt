< 접근 제어자 > 

-정보 은닉을 위해 접근 제어자 사용
 정보 은닉 : 사용자가 굳이 알 필요없는 정보는 숨김
               사용자 : 최소의 정보로 프로그램을 손쉽게 사용
-private, public, default, protected

< private >

-외부에 공개되지 않으며, 외부에서 직접 접근할 수 없음
-public 메소드를 통해서만 접근 가능
-public 인터페이스를 직접 구성하지 않고, 클래스 내부의 세부적인 동작을 구현하는 데 사용됨

< public >

-외부로 공개되며, 해당 객체를 사용하는 프로그램 어디서나 접근가능
-private 멤버와 프로그램 사이의 인터페이스 역할
-public 멤버는 프로그램 어디에서 누구나 접근 가능

< default > 

-클래스 및 클래스 멤버의 접근 제어의 기본값
-접근 제어자가 지정되지 않으면 자동으로 default를 가지게 된다.
-같은 클래스의 멤버와 같은 패키지에 속하는 멤버에서만 접근 가능

< protected > 

-부모 클래스에 대해서는 public 멤버처럼 취급되며, 외부에서는 private 멤버처럼 취급된다.
-protected에 접근할 수 있는 영역
1. 이 멤버를 선언한 클래스의 멤버
2. 이 멤버를 선언한 클래스가 속한 패키지의 멤버
3. 이 멤버를 선언한 클래스를 상속받은 자식 클래스의 멤버

< 접근 제어자의 접근 범위 > 

(접근 범위 많음) public > protected > default > private (접근 범위 적음)

퍼블릭은 다 가능
프로텍티드는 같은 패키지는 다 가능 + 다른 패키지의 자식 클래스만 가능
디폴트는 같은 패키지만 가능
프라이빗은 같은 클래스만 가능

* protected 예제

> 같은 패키지는 접근 허용
package test;

public class SameClass{
   protected String sameVar = "다른 패키지에 속하는 자식 클래스까지 허용"
}

> 다른 패키지에 속하는 자식 클래스도 접근 허용

package test.other
import test.SameClass; //test 패키지의 SameClass 클래스를 불러들여 포함시킴

public class ChildClass extends SameClass{
  public static void main(Strting[] args){
    SameClass = new SameClass();
    System.out.println(sp.sameVar); //다른 패키지에 속하는 자식 클래스까지 허용
  }
}